;;;
;;; lab8_rom.psm
;;; 
;;; Look at https://code.google.com/p/opbasm/
;;; opbasm -i lab9_rom.psm -t ROM_form.v -6

    
    ;;
    ;; These are the registers in the various GPIO Blocks
    ;; 
    constant SW0_OEN,      00
    constant SW0_DATA,     01
    constant SW0_CONTROL,  02
    constant SW0_IRQ_MASK, 03
    constant SW0_IRQ,      04  
    constant SW0_DEBOUNCE, 05
        
    constant SW1_OEN,      10
    constant SW1_DATA,     11
    constant SW1_CONTROL,  12
    constant SW1_IRQ_MASK, 13
    constant SW1_IRQ,      14  
    constant SW1_DEBOUNCE, 15
        
    constant LED0_OEN,      20
    constant LED0_DATA,     21
    constant LED0_CONTROL,  22
    constant LED0_IRQ_MASK, 23
    constant LED0_IRQ,      24  
    constant LED0_DEBOUNCE, 25
        
    constant LED1_OEN,      30
    constant LED1_DATA,     31
    constant LED1_CONTROL,  32
    constant LED1_IRQ_MASK, 33
    constant LED1_IRQ,      34  
    constant LED1_DEBOUNCE, 35
        
    constant UART_DATA,     40
    constant UART_CONTROL,  41
    constant UART_STATUS,   42
    constant UART_IRQ_MASK, 43
    constant UART_IRQ,      44
    constant UART_BAUD_LOW, 45
    constant UART_BAUD_HI,  46

    constant DISPLAY_SEGMENT0,  50
    constant DISPLAY_SEGMENT1,  51
    constant DISPLAY_SEGMENT2,  52
    constant DISPLAY_SEGMENT3,  53       

    constant BUTTONS_OEN,      60
    constant BUTTONS_DATA,     61
    constant BUTTONS_CONTROL,  62
    constant BUTTONS_IRQ_MASK, 63
    constant BUTTONS_IRQ,      64  
    constant BUTTONS_DEBOUNCE, 65
    constant BUTTONS_SIGNAL,   66

    constant SPI_CONTROL,      70
    constant SPI_STATUS,       71
    constant SPI_DATA,         72
    constant SPI_EXTENSION,    73
    constant SPI_NCS,          74
    constant SPI_TEMP_LOW,     75
    constant SPI_TEMP_HIGH,    76   

	  constant ADXL362_DEVID_AD          ,00
	  constant ADXL362_DEVID_MST         ,01
	  constant ADXL362_PARTID            ,02
	  constant ADXL362_REVID             ,03
	  constant ADXL362_XDATA             ,08
	  constant ADXL362_YDATA             ,09
	  constant ADXL362_ZDATA             ,0A
	  constant ADXL362_STATUS            ,0B
	  constant ADXL362_FIFO_ENTRIES_LOW  ,0C
	  constant ADXL362_FIFO_ENTRIES_HIGH ,0D
	  constant ADXL362_XDATA_LOW         ,0E
	  constant ADXL362_XDATA_HIGH        ,0F
	  constant ADXL362_YDATA_LOW         ,10
	  constant ADXL362_YDATA_HIGH        ,11
	  constant ADXL362_ZDATA_LOW         ,12
	  constant ADXL362_ZDATA_HIGH        ,13
	  constant ADXL362_TEMP_LOW          ,14
	  constant ADXL362_TEMP_HIGH         ,15
	  constant ADXL362_SOFT_RESET        ,1F
	  constant ADXL362_THRESH_ACT_LOW    ,20
	  constant ADXL362_THRESH_ACT_HIGH   ,21
	  constant ADXL362_TIME_ACT          ,22
	  constant ADXL362_THRESH_INACT_LOW  ,23
	  constant ADXL362_THRESH_INACT_HIGH ,24
	  constant ADXL362_TIME_INACT_LOW    ,25
	  constant ADXL362_TIME_INACT_HIGH   ,26
	  constant ADXL362_ACT_INACT_CTL     ,27
	  constant ADXL362_FIFO_CONTROL      ,28
	  constant ADXL362_FIFO_SAMPLES      ,29
	  constant ADXL362_INTMAP1           ,2A
	  constant ADXL362_INTMAP2           ,2B
	  constant ADXL362_FILTER_CTL        ,2C
	  constant ADXL362_POWER_CTL         ,2D
	  constant ADXL362_SELF_TEST         ,2E

	  constant ADXL362_COMMAND_WRITE     ,0A
	  constant ADXL362_COMMAND_READ      ,0B
	  constant ADXL362_COMMAND_FIFO      ,0D
  
start:


    load sD, 20
    store sD, 00    
    call LEDS_INIT

    load sD, 30
    store sD, 00    
    call LEDS_INIT    
        
    load sD, 00
    store sD, 00    
    call GPIO_INIT

    load sD, 10
    store sD, 00    
    call GPIO_INIT

    load sD, 60
    store sD, 00    
    call BUTTONS_INIT
        
    call UART_INIT

    call DISPLAY_INIT

    call SPI_INIT
    call ADXL362_INIT
    
  
    ;;
    ;; Allow interrupts to be processed
    ;; 
    ENABLE INTERRUPT   

    load sF, 00
loop:

    input s1, SW0_DATA
    output s1, LED0_DATA
   
    input s1, SW1_DATA
    output s1, LED1_DATA

UP_BUTTON:

    call ADXL362_GET_TEMPERATURE 
    
    test sE, 01
    jump Z, RIGHT_BUTTON

    and sE, FE
    load sC, 55                 ; 'U'
    call PUTCHAR   
    load sC, 70                 ; 'p'
    call PUTCHAR   

RIGHT_BUTTON:
    test sE, 02
    jump Z, DOWN_BUTTON

    and sE, 01 
    load sC, 52                 ; 'R'
    call PUTCHAR   
    load sC, 69                 ; 'i'
    call PUTCHAR       
    load sC, 67                 ; 'g'
    call PUTCHAR   
    load sC, 68                 ; 'h'
    call PUTCHAR       
    load sC, 74                 ; 't'
    call PUTCHAR       
    
    
DOWN_BUTTON:
    test sE, 04
    jump Z, LEFT_BUTTON

    and sE, FB
    load sC, 44                 ; 'D'
    call PUTCHAR   
    load sC, 6F                 ; 'o'
    call PUTCHAR       
    load sC, 77                 ; 'w'
    call PUTCHAR   
    load sC, 6E                 ; 'n'
    call PUTCHAR       
    
LEFT_BUTTON:
    test sE, 08
    jump Z, JUMP_LOOP

    and sE, F7    
    load sC, 4C                 ; 'L'
    call PUTCHAR   
    load sC, 65                 ; 'e'
    call PUTCHAR       
    load sC, 66                 ; 'f'
    call PUTCHAR   
    load sC, 74                 ; 't'
    call PUTCHAR       

JUMP_LOOP:
    load sE, 00
    jump loop

GPIO_INIT:
   ;; Get the offset for this LED
    fetch sA, 00

    ;; Write 00 to the OEN reg to make them inputs
    load s0, 00
    output S0, sA

    return    
    
LEDS_INIT:
    ;; Get the offset for this LED
    fetch sA, 00

    ;; Write FF to the OEN reg to make them outputs
    load s0, FF
    output S0, sA

    ;; Turn off all the LEDS
    load s0, 00
    add sA, 01
    output S0, sA
    
    return
        
BUTTONS_INIT:
    ;; Buttons are all inputs
    load s0,00
    output s0, BUTTONS_OEN

    load s0, 0F
    output s0, BUTTONS_DEBOUNCE
    
    return
UART_INIT:
    ;;   
    ;; Set up UART Baud Rate
    ;; 
    load S0, 35
    output S0, UART_BAUD_LOW
    
    return

PUTCHAR:
    output SC, UART_DATA
PUTCHAR_WAIT:
    ;; Wait for tx_data_present to be a zero
    input sB, UART_STATUS
    test sB, 08
    jump C, PUTCHAR_WAIT
    return
    
DISPLAY_INIT:
    load S0, DISPLAY_SEGMENT0
    output S0,00

    load S0, DISPLAY_SEGMENT1
    output S0,00

    load S0, DISPLAY_SEGMENT2
    output S0,00

    load S0, DISPLAY_SEGMENT3
    output S0,00

    return

SPI_INIT:
  load S0, C0
  output S0, SPI_STATUS                 ;Clear SPIF and WCOL

  load S0, D2
  output S0, SPI_CONTROL                   ;Enable SPI, enable interrupt, Master mode, SPR=2

  load S0, 01
  output S0, SPI_EXTENSION                   ;extension and SPR are combined to calculate sck_o frequency
  
  return


ADXL362_SPI_WRITE:

  load s0,0
  output s0, SPI_NCS            ;Lower NCS
  
  load S0, ADXL362_COMMAND_WRITE
  output S0, SPI_DATA           ;Do a write

  fetch S6, 00
  output S6, SPI_DATA           ;To this register
  
  fetch S7, 01                  ; With this data
  output S7, SPI_DATA
  
  load s9, 01
SPI_WRITE_WAIT_COMMAND: 
  input S2, SPI_STATUS
  test s2, 80                   ;Test SPIF
  jump Z, SPI_WRITE_WAIT_COMMAND

  load S0, 80
  output S0, SPI_STATUS                 ;Clear SPIF
  
  load s9, 02
SPI_WRITE_WAIT_ADDRESS: 
  input S2, SPI_STATUS
  test s2, 80                   ;Test SPIF
  jump Z, SPI_WRITE_WAIT_ADDRESS

  load S0, 80
  output S0, SPI_STATUS                 ;Clear SPIF

  load s9, 03
SPI_WRITE_WAIT_DATA: 
  input S2, SPI_STATUS
  test s2, 80                   ;Test SPIF
  jump Z, SPI_WRITE_WAIT_DATA

  load S0, 80
  output S0, SPI_STATUS                 ;Clear SPIF
  
 
  load s0,1                     ;Raise NCS
  output s0, SPI_NCS  

  return


ADXL362_SPI_READ:

  load s0,0
  output s0, SPI_NCS            ;Lower NCS
  
  load S0, ADXL362_COMMAND_READ
  output S0, SPI_DATA           ;Do a read 

  fetch S6, 80
  output S6, SPI_DATA           ;To this register

  load s0, 00
  output S0, SPI_DATA           ; Send 00 to read back a value
  
  load s9, 81
SPI_READ_WAIT_COMMAND: 
  input S2, SPI_STATUS
  test s2, 80                   ;Test SPIF
  jump Z, SPI_READ_WAIT_COMMAND

  load S0, 80
  output S0, SPI_STATUS                 ;Clear SPIF
  input s0, SPI_DATA                    ;read FIFO
  
  load s9, 82
SPI_READ_WAIT_ADDRESS: 
  input S2, SPI_STATUS
  test s2, 80                   ;Test SPIF
  jump Z, SPI_READ_WAIT_ADDRESS

  load S0, 80
  output S0, SPI_STATUS                 ;Clear SPIF
  input s0, SPI_DATA                    ;read FIFO
  
  load s9, 83
SPI_READ_WAIT_DATA: 
  input S2, SPI_STATUS
  test s2, 80                   ;Test SPIF
  jump Z, SPI_READ_WAIT_DATA

  load S0, 80
  output S0, SPI_STATUS                 ;Clear SPIF
  input s0, SPI_DATA                    ;read FIFO
  store s0, 00
 
  load s0,1                     ;Raise NCS
  output s0, SPI_NCS  

  return  

  
ADXL362_INIT:

  load sC, ADXL362_DEVID_AD
  store sC, 00
  call ADXL362_SPI_READ

  fetch s0, 00
  compare s0, AD
  jump Z, ADXL362_FINISH_INIT

ADXL362_FAIL:
  jump ADXL362_FAIL

ADXL362_FINISH_INIT:  
  load SC, ADXL362_FIFO_CONTROL ;This register
  store SC, 00
  load SD, 06                   ;This Data
  store SD, 01
  call ADXL362_SPI_WRITE
  
  return

ADXL362_GET_TEMPERATURE:

    load sC, ADXL362_TEMP_LOW
    store sC, 00
    call ADXL362_SPI_READ

    fetch s0, 00  
    output s0, SPI_TEMP_LOW    
    
    load sC, ADXL362_TEMP_HIGH
    store sC, 00
    call ADXL362_SPI_READ

    fetch s0, 00  
    output s0, SPI_TEMP_HIGH
    
    return
  
IRQ_HANDLER:
    input s1, UART_STATUS
    test s1, 01
    jump z, BUTTON_IRQ_HANDLER
    
    input S9, UART_DATA
    output S9, UART_DATA
    
    ;; if less than 0x30 (ascii '0') don't update
    ;; the 7 segment displays
    compare s9, 30
    jump C, IRQ_HANDLER_RETURN
    
    ;; if greater than 0x39 (ascii '9') don't update
    ;; the 7 segment display
    compare s9, 39
    jump Z, UPDATE_DISPLAY
    jump C, UPDATE_DISPLAY
    jump BUTTON_IRQ_HANDLER

    
UPDATE_DISPLAY: 
    ;; Shift 7 ssegment display over
    input s2,  DISPLAY_SEGMENT2
    output s2,  DISPLAY_SEGMENT3
    
    input s2,  DISPLAY_SEGMENT1
    output s2,  DISPLAY_SEGMENT2
    
    input s2,  DISPLAY_SEGMENT0
    output s2,  DISPLAY_SEGMENT1
    
    output s9, DISPLAY_SEGMENT0

BUTTON_IRQ_HANDLER:
    load sF, 00
    load sE, 00
    load s4, 00
    
    input sF, BUTTONS_SIGNAL
    load sE, sF
    
    compare sF, 00
    jump Z, IRQ_HANDLER_RETURN
    

    load s4, sF
    output s4, BUTTONS_DEBOUNCE

    load s0, 0F
    output s0, BUTTONS_DEBOUNCE
    
IRQ_HANDLER_RETURN:     
    RETURNI ENABLE
    
    address 3FF
    jump IRQ_HANDLER    


